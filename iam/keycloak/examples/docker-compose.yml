version: "3.8"
services:
  keycloak:
    image: mprevide/keycloak:test_1
    depends_on:
      - kafka
      - postgres
    restart: always
    environment:
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.impersonation=disabled"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KAFKA_SERVERS: kafka:9092
      KAFKA_CLIENT_ID: keycloak
      KAFKA_TOPIC: dojot-management.dojot.tenancy
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_LOGLEVEL: INFO
      ROOT_LOGLEVEL: INFO
      PROXY_ADDRESS_FORWARDING: "true"
      # KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth
      # PROXY_ADDRESS_FORWARDING: "true" # When running Keycloak behind a proxy, you will need to enable proxy address forwarding
      # KEYCLOAK_STATISTICS: all
      # DEBUG: "true"
      # DEBUG_PORT: "*:8787"
    ports:
      - "8080:8080"
      #- "8443:8443"
      # - "8787:8787"

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
      - postgres-volume:/var/lib/postgresql/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    restart: always
    ports:
      - 5050:8889
    volumes:
      - pgadmin-volume:/var/lib/pgadmin

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    depends_on:
      - zookeeper
    restart: always
    hostname: "kafka"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_LOG_RETENTION_MINUTES: "30"
      KAFKA_LOG_SEGMENT_BYTES: "262144000"
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: "30000"
    volumes:
      - kafka-volume:/var/lib/kafka/data
      - kafka-secrets-volume:/etc/kafka/secrets
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  zookeeper:
    image: "confluentinc/cp-zookeeper:5.5.0"
    restart: always
    environment:
      ZOOKEEPER_REPLICAS: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_ELECTION_PORT: 3888
      ZOOKEEPER_SERVER_PORT: 2888
      ZOOKEEPER_HEAP_SIZE: "2G"
      ZOOKEEPER_INIT_LIMIT: "5"
      ZOOKEEPER_LOG_LEVEL: "INFO"
      ZOOKEEPER_MAX_CLIENT_CNXNS: "100"
      ZOOKEEPER_MAX_SESSION_TIMEOUT: "40000"
      ZOOKEEPER_MIN_SESSION_TIMEOUT: "4000"
      ZOOKEEPER_PURGE_INTERVAL: "0"
      ZOOKEEPER_SNAP_RETAIN_COUNT: "3"
      ZOOKEEPER_SYNC_LIMIT: "10"
      ZOOKEEPER_TICK_TIME: "2000"
    volumes:
      - zookeeper-volume:/var/lib/zookeeper/data
      - zookeeper-log-volume:/var/lib/zookeeper/log
      - zookeeper-secrets-volume:/etc/zookeeper/secrets
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka
    restart: always
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    ports:
      - "9090:9000"

  # Prepare database, Bootstrap the database
  kong-migrations:
    image: dojot/kong:v0.5.1
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    image:  dojot/kong:v0.5.1
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  apigw:
    image: dojot/kong:feature_keycloak-10.0.1 #dojot/kong:v0.5.1
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: info
      KONG_CLIENT_ID: "" #get client id from keycloak
      # To enable HTTPs external, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt in KONG_SSL_CERT.
      # KONG_SSL_CERT_KEY: /certs/example-external.key
      # KONG_SSL_CERT: /certs/example-external.crt
      # To enable HTTPs internal with mutual authentication, it is necessary to configure public certificates
      # issued by a EJBCA internal from dojot in KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE.
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE_KEY: /certs/example-internal.key
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE: /certs/example-internal.crt
      # Root cerficate from internal CA
      # KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: /certs/root-ca-internal.crt
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY_DEPTH: "2"
    ports:
      - "8000:8000/tcp"
      # Proxy listen to HTTPS traffic (8443). services and routes must be configured to use the https protocol
      # Each service must have its certificate with Subject Alternative Name generated by dojot's EJBCA.
      #- "8443:8443/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: 100m

  konga:
    image: dojot/pantsel_konga:0.14.7
    depends_on:
      - apigw
      - mongodb
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongodb
      KONGA_LOG_LEVEL: info
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
      NODE_ENV: production
      BASE_URL: localhost
    volumes:
      - ./kong/konga.config.js:/konga.js:ro
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  influxdb-retriever:
    image: dojot/influxdb-retriever:v0.5.1
    depends_on:
      - influxdb
    environment:
      RETRIEVER_LOG_CONSOLE_LEVEL: "info"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  influxdb-storer:
    image: dojot/influxdb-storer:v0.5.1
    depends_on:
      - kafka
      - influxdb
    environment:
      STORER_LOG_CONSOLE_LEVEL: "info"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  influxdb-setup:
    image: quay.io/influxdb/influxdb:v2.0.2
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    volumes:
      - influxdb-volume:/root/.influxdbv2/
      - ./influxdb/init-influx.sh:/init-influx.sh:Z
    entrypoint:
      - /init-influx.sh
    depends_on:
      influxdb:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  influxdb:
    image: quay.io/influxdb/influxdb:v2.0.2
    restart: always
    volumes:
      - influxdb-volume:/root/.influxdbv2
    healthcheck:
      test: "influx ping"
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

volumes:
  postgres-volume:
  pgadmin-volume:
  kafka-volume:
  kafka-secrets-volume:
  zookeeper-volume:
  zookeeper-log-volume:
  zookeeper-secrets-volume:
  influxdb-volume:

