name: Backstage

# trigger when create a branch, push a tag or a branch, PR with changes in 'storage/time-series/influxdb/retriever/**'
on:
  create:
  push:
  pull_request:

jobs:
  unit-tests:
    name: Unit Tests
    if: contains(github.event.head_commit.message, 'ci skip') == false
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:

    - name: checkout
      uses: actions/checkout@v1

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: npm install, build, and test
      run: |
        # npm ci
        # npm run build --if-present
        # npm run lint
        # npm run check-licenses
        # npm run test
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v1
    #   with:
    #     directory: /
    #     flags: backstage # Flags allow you to isolate coverage reports for different tests
    #     name: backstage # Custom defined name for the upload

  docker-hub:
    needs: unit-tests
    name: Build and Publish image to DockerHub
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/pull/') == false # if this a PR doesn't run
    steps:

    - name: Owner Repository
      id: get_owner
      run: |
        export OWNER=$(echo ${{ github.repository }} | cut -f1 -d"/")
        echo Current Owner is $OWNER
        echo ::set-output name=owner::$OWNER
    - name: Checkout
      uses: actions/checkout@v1

    - name: Build and Push
      uses: elgohr/Publish-Docker-Github-Action@2.16
      with:
        name: ${{ steps.get_owner.outputs.owner }}/backstage
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        # workdir: new-backstage/
        buildoptions: ' --label commit_sha_dojot=${{ github.sha }} '  # label with commit that built image
        tag_names: true # tag will be based in branch name or tag name

  gh-pages-swagger:
    needs: unit-tests
    name: Generate swagger documentation and Publish in gh-pages
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/pull/') == false # if this a PR doesn't run
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Version Doc
        id: version_doc
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          export TAG_VERSION=$(sh .github/workflows/scripts/translate_docker_tag.sh)
          echo Documentation Version $TAG_VERSION
          echo ::set-output name=version::$TAG_VERSION
      - name: Generate docs
        env:
          PATH_SWAGGER_YML: ./api/v1.yml
          VERSION_NAME: ${{ steps.version_doc.outputs.version }}
        run: |
          sh .github/workflows/scripts/swagger.sh

      - name: Publish Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./swagger-docs
          destination_dir: api
          keep_files: true
          allow_empty_commit: false

  gh-pages-graphql:
    needs: unit-tests
    name: Generate graphql documentation and Publish in gh-pages
    runs-on: ubuntu-latest
    if: contains(github.ref, 'refs/pull/') == false # if this a PR doesn't run
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Version Doc
        id: version_doc
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          export TAG_VERSION=$(sh .github/workflows/scripts/translate_docker_tag.sh)
          echo Documentation Version $TAG_VERSION
          echo ::set-output name=version::$TAG_VERSION

      - name: Generate docs
        env:
          VERSION_NAME: ${{ steps.version_doc.outputs.version }}
        run: |
          npm install
          mkdir -p backstage-docs-temp
          cd backstage-docs-temp
          npm install -g @2fd/graphdoc
          node ../docs/GenerateFileSchema.js
          graphdoc -s ../docs/schemaDoc.graphql -o ./${VERSION_NAME} -f

      - name: Publish Documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./backstage-docs-temp
          destination_dir: graphql
          keep_files: true
          allow_empty_commit: false
