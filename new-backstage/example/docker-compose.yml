version: "3.8"

services:

  # Prepare database, Bootstrap the database
  kong-migrations:
    image: mprevide/kong:add_kong #TODO upgrade to dojot kong at dojot dockerhub
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    image: mprevide/kong:add_kong #TODO upgrade to dojot kong at dojot dockerhub
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  apigw:
    image: mprevide/kong:add_kong #TODO upgrade to dojot kong at dojot dockerhub
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
    ports:
      - "8000:8000/tcp"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kong-config:
    image: appropriate/curl:3.1
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  konga:
    image: pantsel/konga:0.14.7
    depends_on:
      - apigw
      - mongodb
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongodb
      KONGA_LOG_LEVEL: info
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
      NODE_ENV: production
      BASE_URL: localhost
    volumes:
      - ./kong/konga.config.js:/konga.js:ro
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  keycloak:
    image: jboss/keycloak:12.0.2
    depends_on:
      - postgres
    restart: always
    volumes:
      - ./keycloak/admin_realm.json:/tmp/example-realm.json:Z
    environment:
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.impersonation=disabled -Dkeycloak.profile.feature.upload_scripts=enabled"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_LOGLEVEL: INFO
      ROOT_LOGLEVEL: INFO
      KEYCLOAK_HOSTNAME: localhost
      KEYCLOAK_IMPORT: /tmp/example-realm.json
      KEYCLOAK_FRONTEND_URL: http://localhost:8080/auth
      PROXY_ADDRESS_FORWARDING: "true" # When running Keycloak behind a proxy, you will need to enable proxy address forwarding
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl -f http://localhost:8080/auth || exit 1"
      start_period: 20s
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  postgres:
    image: postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@pgadmin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - postgres
    restart: always
    ports:
      - 5050:80

  mongodb:
    image: mongo:3.2
    restart: always
    user: "mongodb"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  dojot-mock:
    build:
      context: ./dojot-mock/
      dockerfile: ./Dockerfile
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  backstage:
    build:
      context: ./../
      dockerfile: ./Dockerfile
    environment:
      BS_CONFIG_FILE: development.conf
      NODE_ENV: development
      # The BS_SESSION_SECRET should be unique for each environment
      BS_SESSION_SECRET: j0yYsBdc4p+PPq6ArjshcPdz0HA6W
      BS_SESSION_COOKIE_HTTPS: 'false'
      # TODO: improve, so there is no need to pass urls or once only the domain and if it is http or https
      BS_APP_BASE_URL: 'http://localhost:8000' # The URL where this service will be available
      BS_GUI_RETURN_URL: 'http://localhost:8000/return' # URL available via browser to receive the response when the login process is complete.
      BS_GUI_HOME_URL: 'http://localhost:8000' # Initial GUI URL, URL available via browser.
      BS_KEYCLOAK_URL_EXTERNAL: 'http://localhost:8000/auth' #URL for external access
      BS_SESSION_DOMAIN: localhost # The domain where the cookie will be used.
      BS_GRAPHQL_GRAPHIQL: 'true' # If true, presents GraphiQL when the GraphQL endpoint is loaded in a browser.
    restart: always
    volumes:
      - ./../app/:/opt/backstage/app/:Z
    # - ./../app/graphql:/opt/backstage/app/graphql:Z
    # remove temporarily the `--only=prod` flag in npm install on the Dockerfile to use nodemon (npm run dev)
    command: ["npm", "run", "dev"]
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  redis-backstage:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    ports:
      - 6379:6379 #For tests running externally
    logging:
      driver: json-file
      options:
        max-size: 100m

  redis-commander:
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis-backstage:6379
    ports:
      - "8081:8081"

  spa-example:
    build:
      context: ./spa-example/
      dockerfile: ./Dockerfile
    tty: true
    command: npm start


