
# APP
app.base.url:string=http://localhost:8000
app.internal.base.url:string=http://apigw:8000

# TODO change the configuration manager to accept this type of variable like:  gui.return.url:string=${app.base.url}/return
gui.return.url:string=http://localhost:8000/return
gui.home.url:string=http://localhost:8000

express.trustproxy:boolean=true

# Lightship
lightship.detect.kubernetes:boolean=false
# Lightship (milliseconds) waits for Node.js process to exit gracefully after it receives a shutdown signal
lightship.graceful.shutdown.timeout:integer=120000
# Lightship (milliseconds) waits for shutdown handlers
lightship.shutdown.handler.timeout:integer=20000

#Logger config
log.verbose:boolean=false
log.console.level:string=info
log.file:boolean=false
log.file.level:string=info
log.file.filename:string=backstage-${HOSTNAME:-}-logs-%DATE%.log

#keycloak configuration
keycloak.url.api.gateway:string=http://apigw:8000/auth
keycloak.url.external:string=http://localhost:8000/auth
keycloak.healthcheck.ms:integer=30000
keycloak.public.client.id:string=gui
keycloak.code.challenge.method:string=S256


# SERVER
server.host:string=0.0.0.0
server.port:integer=3000
#server.ca=/certs/ca-cert.pem
#server.key=/certs/server-key.pem
#server.cert=/certs/server-cert.pem
#server.request.cert:boolean=true
#server.reject.unauthorized:boolean=true

#session
session.secret:string=mustbechanged # should be unique for each environment
session.cookie.name:string=dojot-backstage-cookie
session.cookie.https:boolean=true
session.cookie.path:string=/
session.proxy:boolean=true
session.domain:string=localhost

#session redis
session.redis.max.login.return.time.sec:integer=120 #2 minutes in seconds
session.redis.max.life.time.sec:integer=86400 #One day in seconds.
session.redis.max.idle.time.sec:integer=1800 #30 minutes in seconds


# REDIS
redis.client.host:string=redis-backstage
redis.client.port:integer=6379
redis.client.db:integer=0
redis.client.connect_timeout:integer=3600000 #ms
redis.reconnect.after:integer=5000 #ms
#redis.client.tls.ca:string=/certs/ca-cert.pem
#redis.client.tls.key:string=/certs/redis-key.pem
#redis.client.tls.cert:string=/certs/redis-cert.pem
#redis.client.tls.request.cert:boolean=true
#redis.client.tls.reject.unauthorized:boolean=true


# postgres
postgres.healthcheck.ms:integer=30000
postgres.client.host:string=postgres
postgres.client.port:integer=5432
postgres.client.database:string=backstage
postgres.client.user:string=backstage
postgres.client.password:string=backstage
#postgres.client.ssl.ca:string=/certs/ca-cert.pem
#postgres.client.ssl.key:string=/certs/postgres-key.pem
#postgres.client.ssl.cert:string=/certs/postgres-cert.pem
#postgres.client.ssl.request.cert:boolean=true
#postgres.client.ssl.reject.unauthorized:boolean=true

# graphql
graphql.graphiql:boolean=false

# proxy
proxy.target:string=http://apigw:8000
proxy.log.level:string=debug
proxy.secure:string=false #true/false, if you want to verify the SSL Certs
#proxy.ssl.key:string=valid-ssl-key.pem
#proxy.ssl.cert:string=valid-ssl-cert.pem
#proxy.ssl.ca:string=valid-ssl-ca.pem
#proxy.ssl.request.cert:boolean=true
#proxy.ssl.reject.unauthorized:boolean=true
